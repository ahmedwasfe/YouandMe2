package com.ahmet.postphotos.UI.Main.Fragments.Post.Fragments;import android.app.ProgressDialog;import android.content.Intent;import android.content.pm.PackageManager;import android.net.Uri;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.design.widget.FloatingActionButton;import android.support.design.widget.Snackbar;import android.support.v4.app.Fragment;import android.support.v7.widget.Toolbar;import android.text.TextUtils;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.EditText;import android.widget.ImageButton;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.TextView;import com.ahmet.postphotos.Config.Common;import com.ahmet.postphotos.R;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.google.firebase.storage.FirebaseStorage;import com.google.firebase.storage.StorageReference;import com.google.firebase.storage.UploadTask;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import static android.app.Activity.RESULT_OK;public class AddPostFragment extends Fragment {    private ImageButton mSelectedImage;    private EditText mTitlePost,mDescriptionPost;    private Button mSubmitPost;    private ProgressBar mProgress;    private FloatingActionButton mBtnAddPhoto;    private TextView mTextSelectImage;    private LinearLayout mLinearLayout;    private Toolbar mToolBar;    private Uri mImageUri = null;    private static final int CODE_REQUEST_STORAGE = 8;    private static final int CODE_REQUEST_PERMISSION_STORAGE = 7;    private StorageReference mStorage;    private DatabaseReference mDatabase;    private DatabaseReference mDatabaseUser;    private FirebaseAuth mAuth;    private String mCurrentUser;    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mAuth = FirebaseAuth.getInstance();        mCurrentUser = mAuth.getCurrentUser().getUid();        mStorage = FirebaseStorage.getInstance().getReference();        mDatabase = FirebaseDatabase.getInstance().getReference().child("blog");        mDatabaseUser = FirebaseDatabase.getInstance().getReference().child("users").child(mCurrentUser);    }    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        View convertView = inflater.inflate(R.layout.fragment_add_post, container, false);        mSelectedImage = convertView.findViewById(R.id.image_selected);        mDescriptionPost = convertView.findViewById(R.id.text_description_post);        mSubmitPost = convertView.findViewById(R.id.btn_submit_post);        mProgress = convertView.findViewById(R.id.progressBar);        mBtnAddPhoto = convertView.findViewById(R.id.fab_add_photo);        mTextSelectImage = convertView.findViewById(R.id.textView2);        mLinearLayout = convertView.findViewById(R.id.linear_add_photo);       return convertView;    }    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        mBtnAddPhoto.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                mTextSelectImage.setVisibility(View.GONE);                Intent intentGallery = new Intent(Intent.ACTION_GET_CONTENT);                intentGallery.setType("image/*");                startActivityForResult(Intent.createChooser(intentGallery, "SELECT IMAGE"), CODE_REQUEST_STORAGE);            }        });        mSelectedImage.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {//                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){////                    if (ActivityCompat.checkSelfPermission(getActivity(),//                            Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED){//                        requestPermissions(new String[] {Manifest.permission.READ_EXTERNAL_STORAGE},//                                CODE_REQUEST_PERMISSION_STORAGE);//                    }//                }//            }        });        mSubmitPost.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                mProgress.setVisibility(View.VISIBLE);                startPosting();            }        });    }    private void startPosting() {//        final String title = mTitlePost.getText().toString();        final String description = mDescriptionPost.getText().toString();        if (!TextUtils.isEmpty(description) && mImageUri != null){            StorageReference filePath = mStorage.child("Blog_Images").child(mImageUri.getLastPathSegment());            filePath.putFile(mImageUri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {                @Override                public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {                    final Uri downloadUri = taskSnapshot.getDownloadUrl();//                    mRefNewPost.child("title").setValue(title);//                    mRefNewPost.child("description").setValue(description);//                    mRefNewPost.child("image").setValue(downloadUri.toString());                    mDatabaseUser.addValueEventListener(new ValueEventListener() {                        @Override                        public void onDataChange(DataSnapshot dataSnapshot) {                            Date curDate = new Date();                            SimpleDateFormat format = new SimpleDateFormat("MMM d, yyyy hh:mm: a");                            final String timePost = format.format(curDate);//                            String firstName = dataSnapshot.child("first_Name").getValue().toString();//                            String lastName = dataSnapshot.child("last_Name").getValue().toString();                            String imageUser = dataSnapshot.child("image").getValue().toString();                            DatabaseReference mRefNewPost = mDatabase.push();                            HashMap addPostMap = new HashMap();                           // addPostMap.put("title", title);                            addPostMap.put("description", description);                            addPostMap.put("image", downloadUri.toString());                            addPostMap.put("uid", mCurrentUser);                           // addPostMap.put("username", firstName + " " + lastName);                            addPostMap.put("image_user", imageUser);                            addPostMap.put("time_post", timePost);                            addPostMap.put("time_published", System.currentTimeMillis());                            mRefNewPost.setValue(addPostMap)                                    .addOnCompleteListener(new OnCompleteListener<Void>() {                                        @Override                                        public void onComplete(@NonNull Task<Void> task) {                                            if (task.isSuccessful()){                                                mProgress.setVisibility(View.INVISIBLE);                                                Common.replaceFragments(new HomeFragment(),                                                        R.id.frame_layout_home,                                                        getActivity().getSupportFragmentManager());                                            }else {                                                Snackbar snackbar = Snackbar.make(mSelectedImage,"cannot publish Post Please try again",Snackbar.LENGTH_INDEFINITE);                                                snackbar.show();                                            }                                        }                                    });                        }                        @Override                        public void onCancelled(DatabaseError databaseError) {                        }                    });                    mProgress.setVisibility(View.INVISIBLE);                    Snackbar snackbar = Snackbar.make(mSelectedImage,"Uploading Successful",Snackbar.LENGTH_INDEFINITE);                    snackbar.show();                }            });        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode == CODE_REQUEST_PERMISSION_STORAGE){            if (grantResults.length > 0 && grantResults[0] ==                    PackageManager.PERMISSION_GRANTED){                Intent intentGallery = new Intent(Intent.ACTION_GET_CONTENT);                intentGallery.setType("image/*");                startActivityForResult(Intent.createChooser(intentGallery, "SELECT IMAGE"), CODE_REQUEST_STORAGE);            }        }    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == CODE_REQUEST_STORAGE && resultCode == RESULT_OK){//            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE){////                CropImage.ActivityResult result = CropImage.getActivityResult(data);//                mImageUri = result.getUri();//                File filePath = new File(mImageUri.getPath());//                Bitmap imageBitmap = null;//                try {//                    imageBitmap = new Compressor(getActivity())//                            .setMaxWidth(200)//                            .setMaxHeight(200)//                            .setQuality(75)//                            .compressToBitmap(filePath);//                } catch (IOException e) {//                    e.printStackTrace();//                }////                mSelectedImage.setImageBitmap(imageBitmap);//            }            mLinearLayout.setVisibility(View.VISIBLE);            mImageUri = data.getData();            mSelectedImage.setImageURI(mImageUri);        }    }}